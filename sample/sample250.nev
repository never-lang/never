/**
 *    0
 *  1   2
 *    3
 *  4   5
 *    6
 */
func sigm(x : float) -> float
{
    1.0 / (1.0 + exp(-x))
}

func dsigm(x : float) -> float
{
    let s = sigm(x);
    s * (1.0 - s)
}

func print_vec(in_vec[D1, D2] : float) -> int
{
    var i = 0;
    
    for (i = 0; i < D2; i = i + 1)
    {
        printf(in_vec[0, i])
    };
    
    0
}

func sigm_vec(in_vec[D1, D2] : float) -> [D, D] : float
{
    var i = 0;
    var out_vec = {[ D1, D2 ]} : float;
    
    for (i = 0; i < D2; i = i + 1)
    {
        out_vec[0, i] = sigm(in_vec[0, i])
    };
    
    out_vec
}

func in_hidden(in_vec[D1, D2] : float, w1[D3, D4] : float) -> [D, D] : float
{
    in_vec * w1
}

func main() -> int
{
    /* print_vec(sigm_vec([[-9.0, -0.5, 0.0, 0.5, 9.0]] -> float)); */
    let win = [[ 0.1, 0.2, 0.7 ]] : float;
    
    let w1 = [[ 0.1, 0.2, 0.3 ],
              [ 0.3, 0.2, 0.7 ],
              [ 0.4, 0.3, 0.9 ]] : float;

    let w2 = [[ 0.1, 0.4, 0.8 ],
              [ 0.3, 0.7, 0.2 ],
              [ 0.5, 0.2, 0.9 ]] : float;

    var tmp = {[ 1, 1 ]} : float;
    
    tmp = win * w1;
    print_vec(tmp);

    tmp = sigm_vec(tmp);
    print_vec(tmp);
    
    tmp = tmp * w2;
    print_vec(sigm_vec(tmp));
        
    0
}

