
func randomize(seed : int) -> () -> int
{
    var v = seed + 0;
    func rand() -> int
    {
        v = (v * 1103515245 + 12345) % 2147483648
    };
    rand
}

func sigmoid(x : float) -> float
{
    1.0 / (1.0 + exp(-x))
}

func one_matrix(var W[D1, D2] : float) -> int
{
    var r = 0;
    for (r = 0; r < D1; r = r + 1)
    {
        var c = 0;
        for (c = 0; c < D2; c = c + 1)
        {
            W[r, c] = 1.0
        }
    }
}

func rand_matrix(var W[D1, D2] : float, rand() -> int) -> int
{
    var r = 0;
    for (r = 0; r < D1; r = r + 1)
    {
        var c = 0;
        for (c = 0; c < D2; c = c + 1)
        {
            W[r, c] = (rand() % 1000) / 1000.0
        }
    }
}

func sigmoid_matrix(W[D1, D2] : float) -> [_,_] : float
{
    var S = {[ D1, D2 ]} : float;
    
    var r = 0;
    for (r = 0; r < D1; r = r + 1)
    {
        var c = 0;
        for (c = 0; c < D2; c = c + 1)
        {
            S[r, c] = sigmoid(W[r, c])
        }
    };
    S
}

func T_matrix(W[D1, D2] : float) -> [_,_] : float
{
    var T = {[ D2, D1 ]} : float;
    
    var r = 0;
    for (r = 0; r < D1; r = r + 1)
    {
        var c = 0;
        for (c = 0; c < D2; c = c + 1)
        {
            T[c, r] = W[r, c]
        }
    };
    T
}

func Hadamard_matrix(W1[D1, D2] : float, W2[D3, D4] : float) -> [_,_] : float
{
    var H = {[ D1, D2 ]} : float;
    
    var r = 0;
    for (r = 0; r < D1; r = r + 1)
    {
        var c = 0;
        for (c = 0; c < D2; c = c + 1)
        {
            H[r, c] = W1[r, c] * W2[r, c]
        }
    };
    H
}

func print_matrix(W[D1, D2] : float) -> int
{
    var r = 0;
    for (r = 0; r < D1; r = r + 1)
    {
        var c = 0;
        for (c = 0; c < D2; c = c + 1)
        {
            prints(W[r, c] + " ")
        };
        prints("\n")
    }
}

func nn() -> int
{
    var W = {[ 3, 1 ]} : float;
    var one = {[ 4, 1 ]} : float;
    let rand = randomize(165);

    one_matrix(one);
    rand_matrix(W, rand);

    var z = {[ 4, 1 ]} : float;
    var s = {[ 4, 1 ]} : float;

    var i = 0;
    for (i = 0; i < 1000; i = i + 1)
    {
        let x = [ [0.0f, 1.0f, 0.0f],
                  [1.0f, 0.0f, 0.0f],
                  [1.0f, 1.0f, 1.0f],
                  [0.0f, 0.0f, 1.0f] ] : float;

        z = x * W;
        s = sigmoid_matrix(z);

        let y = [ [1.0f, 0.0f, 1.0f, 0.0f] ] : float;
        let yT = T_matrix(y);
        let err = yT - s;
        let sD = Hadamard_matrix(s, one - s);

        W = W + T_matrix(x) * Hadamard_matrix(err, sD)
    };

    z = ([[ 1.0f, 1.0f, 1.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 1.0f, 1.0f, 0.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 1.0f, 0.0f, 1.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 1.0f, 0.0f, 0.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 0.0f, 1.0f, 1.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 0.0f, 1.0f, 0.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 0.0f, 0.0f, 1.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);

    z = ([[ 0.0f, 0.0f, 0.0f ]] : float) * W;
    s = sigmoid_matrix(z);
    print_matrix(s);
    
    0   
}

func main() -> int
{
    nn()
}

