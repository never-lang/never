
module raylib
{
    record Vector2
    {
        x : float;
        y : float;
    }

    record Vector3
    {
        x : float;
        y : float;
        z : float;
    }

    record Vector4
    {
        x : float;
        y : float;
        z : float;
        w : float;
    }

    record Matrix
    {
        m0 : float; m4 : float; m8 : float; m12 : float;
        m1 : float; m5 : float; m9 : float; m13 : float;
        m2 : float; m6 : float; m10 : float; m14 : float;
        m3 : float; m7 : float; m11 : float; m15 : float; 
    }

    record Color
    {
        r : char;
        g : char;
        b : char;
        a : char;
    }

    record Rectangle
    {
        x : float;
        y : float;
        width : float;
        height : float;
    }

    record Image
    {
        data : c_ptr;  /* Image raw data */
        width : int;   /* Image base width */
        height : int;  /* Image base height */
        mipmaps : int; /* Mipmap levels, 1 by default */
        format : int;  /* Data format (PixelFormaty type) */
    }

    record Texture2D
    {
        id : int;      /* OpenGL texture id */
        width : int;
        height : int;
        mipmaps : int;
        format : int;
    }

    record RenderTexture2D
    {
        id : int; /* OpenGL Framebuffer Object (FBO) id */
        texture : Texture2D; /* Color buffer attachement texture */
        depth : Texture2D; /* Depth buffer attachement texture */
        depthTexture : bool; /* Track if depth attachement is a texture or renderbuffer */
    }

    record NPatchInfo
    {
        sourceRec : Rectangle; /* Region in the texture */
        left : int;            /* left border offset */
        top : int;             /* top border offset */
        right : int;           /* right border offset */
        bottom : int;          /* bottom border offset */
        type : int;            /* layout of the n-patch: 3x3, 1x3 or 3x1 */
    }

    record CharInfo
    {
        value : int;            /* Character value (Unicode) */
        offsetX : int;          /* Character offset X when drawing */
        offsetY : int;          /* Character offset Y when drawing */
        advanceX : int;         /* Character advance position X */
        image : Image;          /* Character image data */
    }

    record Font
    {
        baseSize : int;         /* Base size (default chars height) */
        charsCount : int;       /* Number of characters */
        texture : Texture2D;    /* Characters texture atlas */
        recs : c_ptr;           /* Characters rectangles in texture */
        chars : c_ptr;          /* Characters info data */
    }

    record Camera3D
    {
        position : Vector3;
        target : Vector3;
        up : Vector3;
        fovy : float;
        type : int;
    }

    record Camera2D
    {
        offset : Vector2;         /* Camera offset (displacement from target) */
        target : Vector2;         /* Camera target (rotation and zoom origin) */
        rotation : float;         /* Camera rotation in degrees */
        zoom : float;             /* Camera zoom (scaling), should be 1.0f by default */
    }

    /*
    Some Basic Colors
    NOTE: Custom raylib color palette for amazing visuals on WHITE background
    */
    let LIGHTGRAY = Color(chr(200), chr(200), chr(200), chr(255)); /* Light Gray */
    let DARKGRAY = Color(chr(80), chr(80), chr(80), chr(255));     /* Dark Gray */
    let YELLOW = Color(chr(253), chr(249), chr(0), chr(255));      /* Yellow */
    let GOLD = Color(chr(255), chr(203), chr(0), chr(255));        /* Gold */
    let ORANGE = Color(chr(255), chr(161), chr(0), chr(255));      /* Orange */
    let PINK = Color(chr(255), chr(109), chr(194), chr(255));      /* Pink */
    let RED = Color(chr(230), chr(41), chr(55), chr(255));         /* Red */
    let MAROON = Color(chr(190), chr(33), chr(55), chr(255));      /* Maroon */
    let GREEN = Color(chr(0), chr(228), chr(48), chr(255));        /* Green */
    let LIME = Color(chr(0), chr(158), chr(47), chr(255));         /* Lime */
    let DARKGREEN = Color(chr(0), chr(117), chr(44), chr(255));    /* Dark Green */
    let SKYBLUE = Color(chr(102), chr(191), chr(255), chr(255));   /* Sky Blue */
    let BLUE = Color(chr(0), chr(121), chr(241), chr(255));        /* Blue */
    let DARKBLUE = Color(chr(0), chr(82), chr(172), chr(255));     /* Dark Blue */
    let PURPLE = Color(chr(200), chr(122), chr(255), chr(255));    /* Purple */
    let VIOLET = Color(chr(135), chr(60), chr(190), chr(255));     /* Violet */
    let DARKPURPLE = Color(chr(112), chr(31), chr(126), chr(255)); /* Dark Purple */
    let BEIGE = Color( chr(211), chr(176), chr(131), chr(255));    /* Beige */
    let BROWN = Color(chr(127), chr(106), chr(79), chr(255));      /* Brown */
    let DARKBROWN = Color(chr(76), chr(63), chr(47), chr(255));    /* Dark Brown */
    let WHITE = Color(chr(255), chr(255), chr(255), chr(255));       /* White */
    let BLACK = Color(chr(0), chr(0), chr(0), chr(255));           /* Black */
    let BLANK = Color(chr(0), chr(0), chr(0), chr(0));             /* Blank (Transparent) */
    let RAYWHITE = Color(chr(245), chr(245), chr(245), chr(245));  /* My own White (raylib logo) */
    let MAGENTA = Color(chr(255), chr(0), chr(255), chr(255));     /* Magenta */

    let CAMERA_PERSPECTIVE = 0;
    let CAMERA_ORTHOGRAPHIC = 1;

    let CAMERA_CUSTOM = 0;
    let CAMERA_FREE = 1;
    let CAMERA_ORBITA = 2;
    let CAMERA_FIRST_PERSON = 3;
    let CAMERA_THIRD_PERSON = 4;

    let MOUSE_LEFT_BUTTON = 0;
    let MOUSE_RIGHT_BUTTON = 1;
    let MOUSE_MIDDLE_BUTTON = 2;

    /* Window-related functions */
    extern "libraylib.so" func InitWindow(width : int, height : int, title : string) -> void
    extern "libraylib.so" func WindowShouldClose() -> bool
    extern "libraylib.so" func CloseWindow() -> void

    /* Cursor-related functions */

    /* Drawing-related functions */
    extern "libraylib.so" func ClearBackground(color : Color) -> void
    extern "libraylib.so" func BeginDrawing() -> void
    extern "libraylib.so" func EndDrawing() -> void
    extern "libraylib.so" func BeginMode2D(camera : Camera2D) -> void
    extern "libraylib.so" func EndMode2D() -> void
    extern "libraylib.so" func BeginMode3D(camera : Camera3D) -> void
    extern "libraylib.so" func EndMode3D() -> void

    /* Screen-space-related functions */

    /* Timing-related functions */
    extern "libraylib.so" func SetTargetFPS(fps : int) -> void           /* Set target FPS (maximum) */
    extern "libraylib.so" func GetFPS() -> int                           /* Returns current FPS */
    extern "libraylib.so" func GetFrameTime() -> float                   /* Returns time in seconds for last frame drawn */
    extern "libraylib.so" func GetTime() -> double                       /* Returns elapsed time in seconds since InitWindow() */

    /* Color-related functions */
    extern "libraylib.so" func ColorFromHSV(hsv : Vector3) -> Color        /* Returns a Color from HSV values */
    extern "libraylib.so" func Fade(color : Color, alpha : float) -> Color /* Color fade-in or fade-out, alpha goes from 0.0f to 1.0f */

    /* Misc. functions */
    extern "libraylib.so" func GetRandomValue(min : int, max : int) -> int

    /* Files management functions */

    /* Persistent storage management */

    /* Input Handling Functions (Module: core) */

    /* Input-related functions: keyboard */
    extern "libraylib.so" func IsKeyPressed(key : int) -> bool                  /* Detect if a key has been pressed once */
    extern "libraylib.so" func IsKeyDown(key : int) -> bool                     /* Detect if a key is being pressed */
    extern "libraylib.so" func IsKeyReleased(key : int) -> bool                 /* Detect if a key has been released once */
    extern "libraylib.so" func IsKeyUp(key : int) -> bool                       /* Detect if a key is NOT being pressed */
    extern "libraylib.so" func SetExitKey(key : int) -> void                    /* Set a custom key to exit program (default is ESC) */
    extern "libraylib.so" func GetKeyPressed() -> int                           /* Get key pressed, call it multiple times for chars queued */

    /* Input-related functions: gamepads */

    /* Input-related functions: mouse */
    extern "libraylib.so" func IsMouseButtonPressed(button : int) -> bool            /* Detect if a mouse button has been pressed once */
    extern "libraylib.so" func IsMouseButtonDown(button : int) -> bool               /* Detect if a mouse button is being pressed */
    extern "libraylib.so" func IsMouseButtonReleased(button : int) -> bool           /* Detect if a mouse button has been released once */
    extern "libraylib.so" func IsMouseButtonUp(button : int) -> bool                 /* Detect if a mouse button is NOT being pressed */
    extern "libraylib.so" func GetMouseX() -> int                                    /* Returns mouse position X */
    extern "libraylib.so" func GetMouseY() -> int                                    /* Returns mouse position Y */
    extern "libraylib.so" func GetMousePosition() -> Vector2                         /* Returns mouse position XY */
    extern "libraylib.so" func SetMousePosition(x : int, y : int) -> void            /* Set mouse position XY */
    extern "libraylib.so" func SetMouseOffset(offsetX : int, offsetY : int) -> void  /* Set mouse offset */
    extern "libraylib.so" func SetMouseScale(scaleX : float, scaleY : float) -> void /* Set mouse scaling */
    extern "libraylib.so" func GetMouseWheelMove() -> int                            /* Returns mouse wheel movement Y */

    /* Input-related funtions: touch */

    /* Camera System Functions (Module: camera) */
    extern "libraylib.so" func SetCameraMode(camera : Camera3D, mode : int) -> void
    extern "libraylib.so" func UpdateCameraCopy (camera : Camera3D) -> Camera3D

    /* Basic Shapes Drawing Functions (Module: shapes) */

    /* Basic shapes drawing functions */
    extern "libraylib.so" func DrawCircleV(center : Vector2, radius : float, color : Color) -> void
    extern "libraylib.so" func DrawRectangle(posX : int, posY : int, width : int, height : int, color : Color) -> void
    extern "libraylib.so" func DrawRectangleLines(posX : int, posY : int, width : int, height : int, color : Color) -> void

    /* Basic shapes collision detection functions */

    /* Texture Loading and Drawing Functions (Module: textures) */

    /* Image loading functions */
    /* NOTE: This functions do not require GPU access */

    /* Image generation functions */

    /* Image manipulation functions */

    /* Image drawing functions */
    /* NOTE: Image software-redering functions (CPU) */

    /* Texture loading functions */
    /* NOTE: These functions require GPU access */

    /* Texture configuration functions */

    /* Texture drawing functions */

    /* Image/Texture misc functions */

    /* Font Loading and Text Drawing Functions (Module: text) *

    /* Font loading/unloading functions */

    /* Text drawing functions */
    extern "libraylib.so" func DrawFPS(posX : int, posY : int) -> void
    extern "libraylib.so" func DrawText(text : string, posX : int, posY : int, fontSize : int, color : Color) -> void

    /* Text misc. functions */

    /* Text strings management functions (no utf8 strings, only byte chars) */
    /* NOTE: Some strings allocate memory internally for returned strings, just be careful! */

    /* UTF8 text strings management functions */

    /* Basic 3d Shapes Drawing Functions (Module: models) */

    /* Basic geometric 3D shapes drawing functions */
    extern "libraylib.so" func DrawCube(position : Vector3, width : float, height : float, length : float, color : Color) -> void
    extern "libraylib.so" func DrawCubeWires(position : Vector3, width : float, height : float, length : float, color : Color) -> void
    extern "libraylib.so" func DrawPlane(centerPos : Vector3, size : Vector2, color : Color) -> void
    extern "libraylib.so" func DrawGrid(slices : int, spacing : float) -> void

    /* Model 3d Loading and Drawing Functions (Module: models) */

    /* Model loading/unloading functions */

    /* Mesh loading/unloading functions */

    /* Material loading/unloading functions */

    /* Model animations loading/unloading functions */

    /* Mesh generation functions */

    /* Mesh manipulation functions */

    /* Model drawing functions */

    /* Collision detection functions */

}
